class SimulationDTM(SimulationMethod):
    def __init__(self, drone, sensor, X, Y, h, Rl, Rt, scoll, dtm_in, shp_in):
        self.dtm_in = dtm_in
        self.shp_in = shp_in
        super(SimulationDTM, self).__init__(drone, sensor, X, Y, h, Rl, Rt, scoll, delta=0)
        self.method_name = "Simulation (with DTM)"

    def setup_simulation(self):
        '''
        This function retrieves the values from the DTM and overwrites the simulated parameters.
        Specifically:
        1- Extract vertices from user shapefile
        2- Creating new rectangle polygon from extracted vertices
        3- Clipping the user DEM over the Rectangular Surveying area
        4- Extract Data From the Clipped DEM
        '''
        # User inputs:
        # Shapefile path of the user area
        fn = self.shp_in
        # Path of the user DEM
        rasin = self.dtm_in

        ######1- Extract vertices from user shapefile ######
        # reading User shape file
        gdf = gpd.read_file(fn)
        # call the Coordinate reference system of the shapefile
        cr = gdf.crs
        # Initiation of polygon point coordinate with very big/small values useful for next iteration
        max_x = -9999
        max_y = -9999
        min_x = 9999
        min_y = 9999

        # iteration through polygon`s points
        for index, row in gdf.iterrows():
            for pt in list(row['geometry'].exterior.coords):
                xy = Point(pt)
                if xy.x < min_x:
                    min_x = xy.x
                elif xy.x > max_x:
                    max_x = xy.x

                if xy.y < min_y:
                    min_y = xy.y
                elif xy.y > max_y:
                    max_y = xy.y

        # Vertices of the new Rectangular Polygon
        p1 = [min_x, min_y]
        p2 = [max_x, min_y]
        p3 = [max_x, max_y]
        p4 = [min_x, max_y]

        ####2- Creating new rectangle polygon from extracted points####
        polygon = Polygon([p1, p2, p3, p4, p1])

        # Creating GeoDataframe containing The Rectangular Polygon
        data = {'id': [1], 'geometry': polygon}
        poly_gdf = gpd.GeoDataFrame(data, crs=str(cr))

        # create the path of the rectangular area shapefile
        shpin = newpath(fn, "rectangle")

        # Write the  Rectangle polygon into a shape file
        poly_gdf.to_file(filename=shpin, driver='ESRI Shapefile')

        # creating the path of the new Clipped DEM
        rasout = newpath(rasin, "cut")

        rect_DEM = gdal.Warp(rasout, rasin, cutlineDSName=shpin, cropToCutline=True)

        ds = gdal.Open(rasout)
        Elev = ds.GetRasterBand(1).ReadAsArray()

        ###4-Extract Data From the Clipped DEM###
        self.Y = Elev.shape[0]  # no of rows ("height" = Y)
        self.X = Elev.shape[1]  # no of coloumns ("width" = X)

        # origin x_0, y_0
        x_0 = ds.GetGeoTransform()[0]
        Dem_res_x = np.abs(ds.GetGeoTransform()[1])  # pixel dimension
        y_0 = ds.GetGeoTransform()[3]
        Dem_res_y = np.abs(ds.GetGeoTransform()[5])  # pixel dimension
        X_end = x_0 + Dem_res_x * self.X
        Y_end = y_0 + Dem_res_y * self.Y
        self.nstrip_y = np.ceil(self.Y / self.b)  # number of strips in y
        self.nstrip_x = np.ceil(self.X / self.interaxie)  # number of strips in x

        flpath_length = self.X + self.Y * (self.nstrip_x + 1)  # for error checking

        self.num_images = self.nstrip_y * self.nstrip_x  # total expected number of images (in both directions)

        if np.floor(self.b / self.shooting_int) < float(self.UAS_v) / 3.6:
            if flpath_length / self.battery < float(self.UAS_v) / 3.6:
                # UAS min speed compliant with shooting interval
                self.UAS_v_min = max(self.b / self.shooting_int, flpath_length / self.battery)
            else:
                # if the length is too big for the battery duration an error is raised
                raise DroneBatteryError
        else:
            # if the drone max speed is not enough to cover the baseline according to the shooting interval
            # an error is raised
            raise DroneMaxSpeedError

        self.max_distance = self.UAS_v * 60 * self.UAS_v_min  # max distance covered [m]
        self.max_distance_proj = self.nstrip_x * self.b * self.nstrip_y + self.b * self.interaxie  # max distance in project [m]

        # adapt the estimated parameters to uniformly cover the area
        self.b_real = (self.Y-y_0) / self.nstrip_y  # real baseline
        self.i_real = (self.X-x_0) / self.nstrip_x  # real interaxie
        self.Rl_real = 1 - self.b_real / self.H  # real longitudinal overlapping
        self.Rt_real = 1 - self.i_real / self.W  # real transversal overlapping

        # determine the position of camera acquisition
        # moving origin of the acqusition to the bottom left corner of DEM
        self.xo = np.arange(x_0 + self.i_real/2, self.X, self.i_real)   # [m]
        self.yo = np.arange(y_0,  self.Y - self.b_real/2, self.b_real)  # [m]
        self.yo = np.flipud(self.yo)
        self.Xo, self.Yo = np.meshgrid(self.xo, self.yo)                # grid of coordinates [m]

        # determine the position of camera acquisition: Zo
        # set Nan values
        Elev[Elev == -32767.] = np.nan

        # pseudocode: translating the Elev to our conventional Z
        self.Zo = np.nanmean(Elev) + self.current_h  # height of acquisition [m]

        # compute the flight path (sort the couple x and y according to the drone path
        self.nstrip_x = self.nstrip_x.astype(np.int64)
        self.nstrip_y = self.nstrip_y.astype(np.int64)
        self.flpath = np.zeros((self.nstrip_x * self.nstrip_y, 2))  # [Xo, Yo]

        for i in range(self.nstrip_x):
            self.flpath[i * self.nstrip_y: (i + 1) * self.nstrip_y, 0] = self.xo[i]  # [Xo]
            if i % 2 == 1:  # [Yo]
                self.flpath[i * self.nstrip_y: (i + 1) * self.nstrip_y, 1] = np.flipud(self.yo)
            else:
                self.flpath[i * self.nstrip_y: (i + 1) * self.nstrip_y, 1] = self.yo

        # define the grid of ground points -------------------------------------------
        self.xGrid = np.arange(x_0, X_end, Dem_res_x)  # vector of x
        self.yGrid = np.arange(y_0, Y_end, Dem_res_y)  # vector of y coordinates
        self.XGrid, self.YGrid = np.meshgrid(self.xGrid, self.yGrid)  # matrices of all coordinates (couples x and y)
        # index ("name") of each point (to be used in the simulation)
        self.ptName = np.arange(len(self.XGrid[0]) * len(self.YGrid)).reshape((len(self.YGrid), len(self.XGrid[0])), order='F')

        # overlapping map ------------------------------------------------------------
        # map of the number of images from which each point is seen
        # overlapping in y direction (vector) - longitudinal
        over_y = np.zeros(len(self.yGrid))
        for i in range(self.nstrip_y):
            for j, val in enumerate(self.yGrid):
                if val >= self.yo[i] - self.H / 2 and val <= self.yo[i] + self.H / 2:
                    over_y[j] += 1

        # overlapping in x direction (vector) - transversal
        over_x = np.zeros(len(self.xGrid))
        for i in range(self.nstrip_x):
            for j, val in enumerate(self.xGrid):
                if val >= self.xo[i] - self.W / 2 and val <= self.xo[i] + self.W / 2:
                    over_x[j] += 1

        # determine the overlapping maps
        self.Over_x, self.Over_y = np.meshgrid(over_x, over_y)
